using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Plugins.Exceptions;
using Noggog;

namespace HealthAndDamageScalingPatcher
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IOblivionMod, IOblivionModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.Oblivion, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            Console.WriteLine("\n\nInitialization successful, beginning patcher process...\n");
            var count = 0;
            foreach (var oldNpc in state.LoadOrder.PriorityOrder.WinningOverrides<INpcGetter>())
            {
                try
                {
                    if (oldNpc.Stats?.Health == null || oldNpc.EditorID == null)
                        continue;

                    var newNpc = oldNpc.DeepCopy();
                
                    if (newNpc.Stats?.Health == null || newNpc.Stats.Health <= 1)
                        continue;
                    
                    newNpc.Stats.Health = calcHealth(newNpc.Stats.Health);

                    state.PatchMod.Npcs.Set(newNpc);
                    Console.WriteLine($"Successfully modified npc: {oldNpc.EditorID}");
                    ++count;
                    Console.WriteLine($"\tOldHealth:{oldNpc.Stats.Health} NewHealth:{newNpc.Stats.Health}\n");
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, oldNpc);
                }
            }
            
            Console.WriteLine($"For reference..\n");
            Console.WriteLine($"calcHealth(10):{calcHealth(10)}\n");
            Console.WriteLine($"calcHealth(100):{calcHealth(100)}\n");
            Console.WriteLine($"calcHealth(1000):{calcHealth(1000)}");

            Console.WriteLine($"\nFinished patching {count} records.\n");
        }

        private static uint calcHealth(uint health)
        {
            var healthRedefined = (float)health;
            
            if (Settings.HealthMult != 0)
            {
                healthRedefined *= Settings.HealthMult;
                Console.WriteLine($"health after mult:{healthRedefined}");
            }
            
            if (Settings.HealthBonus != 0)
            {
                healthRedefined += Settings.HealthBonus;
                Console.WriteLine($"health after bonus:{healthRedefined}");
            }

            if (Settings.SqueezeHealthTarget != 0 && Settings.SqueezeHealthMagnitude != 0)
            {
                var difference = Settings.SqueezeHealthTarget - healthRedefined;
                Console.WriteLine($"difference:{difference}");
                var fraction = 1 / (1 + Math.Abs(difference) * Settings.SqueezeHealthMagnitude/1000);
                Console.WriteLine($"fraction:{fraction}");
                // fraction gets smaller as difference gets bigger
                // (1 - fraction) gets bigger as difference gets bigger
                var oneMinusFraction = 1 - fraction;
                Console.WriteLine($"oneMinusFraction:{oneMinusFraction}");
                var differenceTimesOneMinusFraction = difference * oneMinusFraction;
                Console.WriteLine($"differenceTimesOneMinusFraction:{differenceTimesOneMinusFraction}");
                healthRedefined += differenceTimesOneMinusFraction;
                Console.WriteLine($"health after squeeze:{healthRedefined}");
            }

            return (uint)Math.Max(1, healthRedefined.ToInt());
        }
    }
}
